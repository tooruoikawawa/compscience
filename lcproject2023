import random
class Pokemon:
    """Blueprint for a new pokemon"""

    def __init__(self):
        self._health = 100
        #    ^--- the leading _ is a convention to mark internal values

    @property
    def health(self):
        """The health of the Pokemon which is between 0 and 100"""
        return self._health

    @health.setter
    def health(self, new_health):
        """Set the new heath value"""
        # here the health limits are enforced
        self._health = min(100, max(0, new_health))

    def attack(self, other, choice):
        """Attack another Pokemon with the chosen attack (1 or 2)

        This function also returns the raw amount of random damage dealt. The
        amount of damage dealt depends on the attack type.
        """
        if choice == 1:
            attack_points = random.randint(18, 25)
        elif choice == 2:
            attack_points = random.randint(10, 35)
        else:
            print("That is not a selection. You lost your turn!")
            attack_points = 0
        other.health -= attack_points
        return attack_points

    def heal(self):
        """Heal the Pokemon"""
        heal_points = random.randint(18, 35)
        self.health += heal_points
        return heal_points
def battle_simulation():
    """Run a simple interactive Pokemon battle simulation"""
    mew = Pokemon()
    user_pokemon = Pokemon()
    while True:
        print("\nATTACK CHOICES\n1. Close range attack\n2. Far range attack\n3. Heal")
        attack_choice = int(input("\nSelect an attack: "))
        # DON'T use eval on user input, this can be dangerous!

        # Mew selects an attack, but focuses on attacking if health is full.
        mew_choice = random.randint(1, 2 if mew.health == 100 else 3)
        # this is your original distinction just condensed into a single line

        # Attacks by user and Mew are done simultaneously
        # with the changes to Pokemon, there is no need to save all the
        # intermediate damage/heal values -> nice and short code
        if attack_choice != 3:
            print(f"You dealt {user_pokemon.attack(mew, attack_choice)} damage.")

        if mew_choice != 3:
            print(f"Mew dealt {mew.attack(user_pokemon, mew_choice)} damage.")

        if attack_choice == 3:
            print(f"You healed {user_pokemon.heal()} health points.")

        if mew_choice == 3:
            print(f"Mew healed {mew.heal()} health points.")

        if mew.health == 0 or user_pokemon.health == 0:
            break

        print(f"Your current health is {user_pokemon.health}")
        print(f"Mew's current health is {mew.health}")

    print(f"Your final health is {user_pokemon.health}")
    print(f"Mew's final health is {mew.health}")

    if user_pokemon.health < mew.health:
        print("\nYou lost! Better luck next time!")
    else:
        print("\nYou won against Mew!")


if __name__ == "__main__":
    battle_simulation()
